##|TYPE Template
##|UNIQUEID 10998336-5037-496c-a163-050060de065a
##|TITLE dOOdad Stored Procedures
##|NAMESPACE Microsoft SQL Server
##|SOURCE_TYPE Source
##|OUTPUT_LANGUAGE Transact-SQL
##|COMMENTS_BEGIN
Use this for SQL dOOdads or other business entities. Select multiple tables and generate all your stored procedures 
in one click!
##|COMMENTS_END
##|GUI_ENGINE Microsoft Script
##|GUI_LANGUAGE VBScript
##|GUI_BEGIN
Dim cmbDatabases
Dim lstTables

Sub setup()

	Dim sOutputPath

	If Not input.Contains("lstTables") Or Not input.Contains("txtPath") Then
	
		If context.Objects.ContainsKey("DnpUtils") Then
			DnpUtils.ReadInputFromCache(context)
		End if	

		ui.Title = "Microsoft SQL Server Insert and Update"
		ui.Width  = 330
		ui.Height = 410

		' Grab default output path
		sOutputPath = ""
		If input.Contains("defaultOutputPath") Then 
			sOutputPath = input.Item("defaultOutputPath")
		End If

		ui.AddLabel "lblPath", "Output file path: ",  "Select the output path."
		ui.AddTextBox "txtPath", sOutputPath, "Select the Output Path."
		ui.AddFilePicker "btnPath", "Select Path", "Select the Output Path.", "txtPath", true

		' List Databases in a ComboBox
		ui.AddLabel "lblDatabases", "Select a database:", "Select a database in the dropdown below."
		Set cmbDatabases = ui.AddComboBox("cmbDatabase", "Select a database.")

		' List Tables in a listbox
		ui.AddLabel "lblTables", "Select tables:", "Select tables from the listbox below."
		Set lstTables = ui.AddListBox ("lstTables", "Select tables:")
		lstTables.Height = 150

		' Attach the onchange event to the cmbDatabases control.
		setupDatabaseDropdown cmbDatabases
		cmbDatabases.AttachEvent "onchange", "cmbDatabases_onchange"

		' Add options
		'ui.AddCheckBox "chkAlter", "Use ALTER procedures", False, "Check this to ALTER existing stored procedures, good for preserving permissions"
		'ui.AddCheckBox "chkGenDoc", "Generate Documentation", True, "Check this to generate documentation after stored procedures are generated"
		'ui.AddCheckBox "chk2005", "Targeting SQL 2005", False, "Check this if you are using SQL 2005"
		
		ui.ShowGUI = True
	Else 
		ui.ShowGUI = False
	End if

End Sub

Sub setupDatabaseDropdown(cmbDatabases)
	cmbDatabases.BindData MyMeta.Databases

	If Not MyMeta.DefaultDatabase Is Nothing Then
		cmbDatabases.SelectedValue = MyMeta.DefaultDatabase.Name
		bindTables cmbDatabases.SelectedValue
	End If
End Sub

Sub bindTables(sDatabase)
	Set db = MyMeta.Databases(sDatabase)
	lstTables.BindData(db.Tables)
End Sub

' Event Handler
Sub cmbDatabases_onchange(control)
	Set cmbDatabases = ui.item("cmbDatabase")
	bindTables cmbDatabases.SelectedText
End Sub
##|GUI_END
##|BODY_MODE Markup
##|BODY_ENGINE Microsoft Script
##|BODY_LANGUAGE VBScript
##|BODY_TAG_START <%
##|BODY_TAG_END %>
##|BODY_BEGIN
<%
'------------------------------------------------------------------------------
' SQL_Insert_Update.vbgen
' Author: Richard Martínez
' Last Update : 2014/09/29
'
' Be sure to rename this template if you plan to customize it, MyGeneration 
' Software will update this template with new builds.
'------------------------------------------------------------------------------
'
'  This template generates Insert Data to new regs and update existent regs
'
'======================================================================

If context.Objects.ContainsKey("DnpUtils") Then
	DnpUtils.SaveInputToCache(context)
End if

Dim objDatabase
Dim objTable
Dim objColumn
Dim intLp
Dim blnFirst
Dim colTableNames
Dim strBuffer
Dim strDatabaseName 
Dim blnGenDoc
Dim strFilename
Dim strFilenameBase
Dim intLen
Dim intPos
Dim SetFields
Dim JoinPk
Dim ConditionUpdate
Dim DebugFields
Dim FirstPk

strDatabaseName  = input.Item("cmbDatabase")
Set objDatabase = MyMeta.Databases(strDatabaseName)

Set colTableNames = input.Item("lstTables")

' Do we do ALTER or CREATE
alterStatement = input.Item("chkAlter")

' Do we do Generate Documentation
blnGenDoc = input.Item("chkGenDoc")

' Save the output file for this Table
strFilenameBase = input.Item("txtPath")

intLen = Len(strFilenameBase)
intPos = InStrRev(strFilenameBase, "\") 

If Not intPos = intLen Then
	strFilenameBase = strFilenameBase & "\"
End If

' Loop through the tables the user select and generate the stored procs and save them to disk
For intLp = 0 To colTableNames.Count - 1
	Set objTable = objDatabase.Tables(colTableNames.item(intLp))
	
	JoinPk = "" 
	debugFields = ""
	
	For k=0 to objTable.PrimaryKeys.Count - 1
		Set objColumn = objTable.PrimaryKeys(k)
		
		If k > 0 Then
			JoinPk = JoinPk & vbCrLf & "	AND "
			debugFields = debugFields & ", "
		Else
			FirstPk = "P." & objColumn
		End If
		JoinPk = JoinPk & "I." & objColumn & " = P." & objColumn
		debugFields = debugFields & "P." & objColumn
	Next
	
	blnFirst = True
	SetFields = "" 
	ConditionUpdate = ""
	For i=0 to objTable.Columns.Count - 1
		Set objColumn = objTable.Columns(i)
	
		' If objColumn.IsInPrimaryKey Or objColumn.IsComputed Then
		If Not objColumn.IsInPrimaryKey Then
			If Not blnFirst Then
				SetFields = SetFields & vbCrLf & ", "
				'ConditionUpdate = ConditionUpdate & vbCrLf & "		OR "
				ConditionUpdate = ConditionUpdate & " OR "
			End if
			
			SetFields = SetFields & "P." & objColumn & " = I." & objColumn
			ConditionUpdate = ConditionUpdate & "P." & objColumn & " <> I." & objColumn
			debugFields = debugFields & ", P." & objColumn & ", I." & objColumn 
			blnFirst = False
		End If
	Next
%>

INSERT INTO AV_process.<%=objTable.Name%>
SELECT I.*
FROM AV_process.<%=objTable.Name%> P
RIGHT JOIN AvatarBase.AV_input.<%=objTable.Name%> I ON <%= JoinPk %>
WHERE I.COUNTRY = @V_Country AND <%= FirstPk %> IS NULL
UPDATE P
SET <%= SetFields %>
--SELECT <%= debugFields %>
FROM AV_process.<%=objTable.Name%> P
INNER JOIN AvatarBase.AV_input.<%=objTable.Name%> I ON <%= JoinPk %>
WHERE I.COUNTRY = @V_Country AND (<%= ConditionUpdate %>)		
<%	
	' Save the output file for this Table
	strFilename = strFilenameBase & objTable.Name & ".sql"

	output.save strFilename, False
	strBuffer = strBuffer & output.text
	output.clear
Next '  tableName
	
output.write strBuffer

filename = input.item("txtPath") 
lenth = Len(filename) 
pos = InStrRev(filename, "\") 

If Not pos = lenth Then 
  filename = filename & "\" 
End If 

filename = filename & "MicrosoftSQL_ALL.SQL" 
output.save filename, false 

' END OF TEMPLATE
%>
##|BODY_END
