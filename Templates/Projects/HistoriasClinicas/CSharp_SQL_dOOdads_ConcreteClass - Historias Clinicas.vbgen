##|TYPE Template
##|UNIQUEID 545956e4-940d-450e-af5f-dfdf8dbdc3b4
##|TITLE dOOdads Concrete Class
##|NAMESPACE dOOdads.C#
##|SOURCE_TYPE Source
##|OUTPUT_LANGUAGE C#
##|COMMENTS_BEGIN
All Databases use this tempate
##|COMMENTS_END
##|GUI_ENGINE Microsoft Script
##|GUI_LANGUAGE VBScript
##|GUI_BEGIN
Dim cmbDatabases
Dim lstTables
Dim chk

Sub setup()

	If context.Objects.ContainsKey("DnpUtils") Then
		DnpUtils.ReadInputFromCache(context)
	End if

	ui.Title = "Generate C# dOOdad Concrete Class"
	ui.Width  = 330
	ui.Height = 430
	ui.BackColor = "wheat"

	' Grab default output path
	Dim sOutputPath
	sOutputPath = ""
	If input.Contains("defaultOutputPath") Then
		sOutputPath = input.Item("defaultOutputPath")
	End If

	ui.AddLabel "lblPath", "Output file path: ",  "Select the output path."
	ui.AddTextBox "txtPath", sOutputPath, "Select the Output Path."
	ui.AddFilePicker "btnPath", "Select Path", "Select the Output Path.", "txtPath", true

	ui.AddLabel "lblNamespace", "Namespace: ",  "Provide your objects namespace."
	ui.AddTextBox "txtNamespace", "Your.Namespace", "Provide your objects namespace."

	' List Databases in a ComboBox
	ui.AddLabel "lblDatabases", "Select a database:", "Select a database in the dropdown below."
	Set cmbDatabases = ui.AddComboBox("cmbDatabase", "Select a database.")

	' List Tables in a listbox
	ui.AddLabel "lblTables", "Select tables:", "Select tables from the listbox below."
	Set lstTables = ui.AddListBox ("lstTables", "Select tables:")
	'lstTables.IsMultiSelect = false
	lstTables.Height = 120

	' Attach the onchange event to the cmbDatabases control.
	setupDatabaseDropdown cmbDatabases
	cmbDatabases.AttachEvent "onchange", "cmbDatabases_onchange"

	ui.ShowGUI = true

End Sub

Sub setupDatabaseDropdown(cmbDatabases)
	cmbDatabases.BindData MyMeta.Databases

	If Not MyMeta.DefaultDatabase Is Nothing Then
		cmbDatabases.SelectedValue = MyMeta.DefaultDatabase.Name
		bindTables cmbDatabases.SelectedValue
	End If
End Sub

Sub bindTables(sDatabase)
	Set db = MyMeta.Databases(sDatabase)
	lstTables.BindData(db.Tables)
End Sub

' Event Handler
Sub cmbDatabases_onchange(control)
	Set cmbDatabases = ui.item("cmbDatabase")
	bindTables cmbDatabases.SelectedText
End Sub
##|GUI_END
##|BODY_MODE Markup
##|BODY_ENGINE Microsoft Script
##|BODY_LANGUAGE VBScript
##|BODY_TAG_START <%
##|BODY_TAG_END %>
##|BODY_BEGIN
<%
'------------------------------------------------------------------------------
' Copyright 2004, 2005 by MyGeneration Software
' All Rights Reserved
'
' Permission to use, copy, modify, and distribute this software and its
' documentation for any purpose and without fee is hereby granted,
' provided that the above copyright notice appear in all copies and that
' both that copyright notice and this permission notice appear in
' supporting documentation.
'
' MYGENERATION SOFTWARE DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS
' SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
' AND FITNESS, IN NO EVENT SHALL MYGENERATION SOFTWARE BE LIABLE FOR ANY
' SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
' WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
' WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
' TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE
' OR PERFORMANCE OF THIS SOFTWARE.
'------------------------------------------------------------------------------
' CSharp_SQL_dOOdads_ConcreteClass.vbgen
' Last Update : 12/21/2005
'------------------------------------------------------------------------------

If context.Objects.ContainsKey("DnpUtils") Then
	DnpUtils.SaveInputToCache(context)
End if

Dim objTable
Dim objColumn
Dim tableNames
Dim namespace
Dim databaseName
Dim strFilename
Dim strFilenameBase

' Save the output file for this Table
strFilenameBase = input.Item("txtPath")

intLen = Len(strFilenameBase)
intPos = InStrRev(strFilenameBase, "\")

If Not intPos = intLen Then
	strFilenameBase = strFilenameBase & "\"
End If

' Grab the namespace
namespace = input.Item("txtNamespace")

databaseName  = input.Item("cmbDatabase")
Set database = MyMeta.Databases(databaseName)

' Grab the choices the user made in our UI Script (see Interface Code tab)
Set tableNames = input.Item("lstTables")

' Loop through the tables the user selected and generate the business entities
For intLp = 0 To tableNames.Count - 1

	Set objTable = database.Tables(tablenames.item(intLp))

%>
// Generated by MyGeneration Version # (<%= input.Item("__version") %>)

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using HCSO.Server;

namespace = namespace %>
{
	public class <%= TrimSpaces(objTable.Alias) %> : HistoriasClinicas
	{
		String spSelect = "sp_<%= LCase(objTable.Alias) %>_load";
		String spUpdate = "sp_<%= LCase(objTable.Alias) %>_update";
		String spInsert = "sp_<%= LCase(objTable.Alias) %>_insert";
		String spDelete = "sp_<%= LCase(objTable.Alias) %>_delete";

		int registroActual = 0;

		OracleParameter[] opGrilla = {
									   new OracleParameter("id", OracleDbType.Int32)
									   , new OracleParameter("id", OracleDbType.Int32)
									   , new OracleParameter("outCursor", OracleDbType.RefCursor, ParameterDirection.Output)
								   };

		// OracleParameter[] opRol = {
		// 							new OracleParameter("id", OracleDbType.Int32)
		// 							, new OracleParameter("p_nombre", OracleDbType.Varchar2)
		// 							, new OracleParameter("outCursor", OracleDbType.RefCursor, ParameterDirection.Output)
		// 						  };


		string localPath = "~" + HttpContext.Current.Request.Url.LocalPath;

		protected void Page_Load(object sender, EventArgs e)
		{
			if (!Page.IsPostBack)
			{
				try
				{
					cargarGrilla(grvBusqueda, spSelect, opGrilla);
				}
				catch (Exception ex)
				{
					setMensajeSession(ex.Message);
				}
			}
		}

		protected void fvDatos_PreRender(object sender, EventArgs e)
		{
			verificarMensajeSession();
			verificarTipoEdicion(fvDatos);
		}

		protected void grvBusqueda_SelectedIndexChanging(object sender, GridViewSelectEventArgs e)
		{
			try
			{
				fvDatos.ChangeMode(FormViewMode.Edit);
				registroActual = Convert.ToInt32(grvBusqueda.DataKeys[e.NewSelectedIndex]["id"]);
				OracleParameter[] op = {
									   new OracleParameter("id", OracleDbType.Int32, registroActual, ParameterDirection.Input)
									   , new OracleParameter("id", OracleDbType.Int32)
									   , new OracleParameter("outCursor", OracleDbType.RefCursor, ParameterDirection.Output)
								   };
				cargarFormulario(fvDatos, spSelect, op);
			}
			catch (Exception ex)
			{
				setMensajeSession(ex.Message);
			}
		}

		protected void btnBuscar_Click(object sender, EventArgs e)
		{
			OracleParameter[] op = {
									   new OracleParameter("id", OracleDbType.Int32)
//									   , new OracleParameter("id", OracleDbType.Int32, txtBuscar.Text.Trim(), ParameterDirection.Input)
									   , new OracleParameter("outCursor", OracleDbType.RefCursor, ParameterDirection.Output)
								   };
			cargarGrilla(grvBusqueda, spSelect, op);
		}

		protected void grvBusqueda_PageIndexChanging(object sender, GridViewPageEventArgs e)
		{
			try
			{
				grvBusqueda.PageIndex = e.NewPageIndex;
				cargarGrilla(grvBusqueda, spSelect, opGrilla);
			}
			catch (Exception ex)
			{
				setMensajeSession(ex.Message);
			}
		}

		protected void btnCrear_Click(object sender, EventArgs e)
		{
			fvDatos.ChangeMode(FormViewMode.Insert);
		}

		protected void btnCancelar_Click(object sender, EventArgs e)
		{
			Response.Redirect(localPath);
		}

		protected void btnEliminar_Click(object sender, EventArgs e)
		{
			int registroActual = Convert.ToInt32(fvDatos.DataKey["id"]);
			OracleParameter[] op = {
									   new OracleParameter("id", OracleDbType.Int32, registroActual, ParameterDirection.Input)
								   };

			actualizarFormulario(spDelete, op);
			setMensajeSession(ConfigurationManager.AppSettings["succesfullDelete"]);
			Response.Redirect(localPath);
		}

		protected void btnGuardar_Click(object sender, EventArgs e)
		{
			int registroActual = Convert.ToInt32(fvDatos.DataKey["id"]);
			string[] valorRetorno = null;
			OracleParameter[] opUpdate = {
											   new OracleParameter("id", OracleDbType.Int32, registroActual, ParameterDirection.Input)
											   , new OracleParameter("p_nombre_completo", OracleDbType.Varchar2, ((TextBox)fvDatos.FindControl("txtNombreCompleto")).Text, ParameterDirection.Input)
											   , new OracleParameter("p_usuario", OracleDbType.Varchar2, ((TextBox)fvDatos.FindControl("txtUsuario")).Text, ParameterDirection.Input)
											   , new OracleParameter("p_email", OracleDbType.Varchar2, ((TextBox)fvDatos.FindControl("txtMail")).Text, ParameterDirection.Input)
											   , new OracleParameter("id_rol", OracleDbType.Int32, ((DropDownList)fvDatos.FindControl("ddlRol")).SelectedValue, ParameterDirection.Input)
											   };

			/*
			 * Ajusto el id del sp de insert para enviarlo como parámetro de salida en la última posición
			 */
			List<OracleParameter> opInsert = new List<OracleParameter>(opUpdate);
			opInsert.RemoveAt(0);
			opInsert.Add(new OracleParameter("id", OracleDbType.Int32, ParameterDirection.Output));

			try
			{
				switch (fvDatos.CurrentMode)
				{
					case FormViewMode.Insert:
						valorRetorno = actualizarFormulario(spInsert, opInsert.ToArray());
						fvDatos.ChangeMode(FormViewMode.Edit);
						setMensajeSession(ConfigurationManager.AppSettings["succesfullInsert"]);
						break;
					case FormViewMode.Edit:
						valorRetorno = actualizarFormulario(spUpdate, opUpdate);
						setMensajeSession(ConfigurationManager.AppSettings["succesfullUpdate"]);
						break;
				}
			}
			catch (Exception ex)
			{
				setMensajeSession(ex.Message);
				return;
			}

			Response.Redirect(localPath);
		}

		protected void fvDatos_ItemCreated(object sender, EventArgs e)
		{
			if (!Page.IsPostBack && registroActual == 0 && fvDatos.CurrentMode.Equals(FormViewMode.Insert) || Page.IsPostBack && registroActual != 0 && fvDatos.CurrentMode.Equals(FormViewMode.Edit))
			{
				//cargarCombo((DropDownList)fvDatos.FindControl("ddlRol"), "PA_ROLES_LOAD", opRol, "id", "nombre");
			}
		}
	}
}
<%
	' Save the output file for this Table
	strFilename = strFilenameBase & objTable.Alias & ".cs"

	output.save strFilename, "d"
	strBuffer = strBuffer & output.text
	output.clear
Next '  tableName

If tableNames.Count > 1 Then
	output.write "// Files created in the output directory"
Else
	output.write strBuffer
End If

Function TrimSpaces(str)

	Dim tname
	Dim name
	Dim char
	Dim l

	name = ""
	tname = str
	l = Len(tname)

	For j = 1 To l
		char = Mid(tname, j, 1)
		If Not char = " " And Not Char = "." Then
			name = name & char
		End If
	Next

	TrimSpaces = name
End Function
%>
##|BODY_END
